AMD HSA Code Object
  Version 1.0
HSAIL 
  Version: 1.0
  Profile: FULL  Machine model: LARGE  Default float rounding: NEAR
ISA
  Vendor AMD  Arch AMDGPU  Version 8:0:1
Producer 'AMD HSA Runtime Finalizer' Version 1:0
Producer options
  '-hsa_call_convention=0 -dump-isa -O2'

Segments (total 1):
  Segment (0)
    Type: CODE_AGENT     Flags: 0x00000005
    Image Size: 504     Memory Size: 504     Align: 256     VAddr: 0

Data Sections (total 1):
  Section .hsatext (Index 4)
    Type: 1     Flags: 0x00c00007
    Size:  504     Address: 0     Align: 256

Relocation Sections (total 0):

Symbols (total 1):
  Symbol &__OpenCL_example_kernel (Index 1):
    Section: .hsatext     Section Offset: 0
    VAddr: 0     Size: 504     Alignment: 256
    Kind: KERNEL     Linkage: PROGRAM     Definition: TRUE

AMD Kernel Code for &__OpenCL_example_kernel: 
  amd_kernel_code_version_major                                = 1
  amd_kernel_code_version_minor                                = 1
  amd_machine_kind                                             = AMDGPU
  amd_machine_version_major                                    = 0
  amd_machine_version_minor                                    = 0
  amd_machine_version_stepping                                 = 0
  kernel_code_entry_byte_offset                                = 256
  max_scratch_backing_memory_byte_size                         = 0
  COMPUTE_PGM_RSRC1 (0xac004300):
    granulated_workitem_vgpr_count                             = 3
    granulated_wavefront_sgpr_count                            = 1
    priority                                                   = 0
    float_round_mode_32                                        = NEAREST_EVEN
    float_round_mode_16_64                                     = NEAREST_EVEN
    float_denorm_mode_32                                       = FLUSH_SOURCE_OUTPUT
    float_denorm_mode_16_64                                    = FLUSH_NONE
    enable_dx10_clamp                                          = TRUE
    enable_ieee_mode                                           = TRUE
  COMPUTE_PGM_RSRC2 (0x90000000):
    user_sgpr_count                                            = 8
    enable_sgpr_workgroup_id_x                                 = TRUE
    enable_vgpr_workitem_id                                    = X
    granulated_lds_size                                        = 0
  KERNEL_CODE_PROPERTIES (0x4a000b00):
    enable_sgpr_private_segment_buffer                         = TRUE
    enable_sgpr_dispatch_ptr                                   = TRUE
    enable_sgpr_kernarg_segment_ptr                            = TRUE
    private_element_size                                       = DWORD (4 bytes)
    is_ptr64                                                   = TRUE
    is_xnack_enabled                                           = TRUE
  kernarg_segment_byte_size                                    = 64
  wavefront_sgpr_count                                         = 16
  workitem_vgpr_count                                          = 13
  kernarg_segment_alignment                                    = 16 (4)
  group_segment_alignment                                      = 16 (4)
  private_segment_alignment                                    = 16 (4)
  wavefront_size                                               = 64 (6)

Disassembly:
  asic(VI)
  type(CS)
  
  //
  // amd_kernel_code_t for &__OpenCL_example_kernel (000000000000 - 000000000100)
  //
  //
  // &__OpenCL_example_kernel:
  //
  s_load_dword  s0, s[4:5], 0x04                        // 000000000100: C0020002 00000004
  s_waitcnt     lgkmcnt(0)                              // 000000000108: BF8C007F
  s_bfe_u32     s0, s0, 0x00100000                      // 00000000010C: 9280FF00 00100000
  s_mul_i32     s0, s0, s8                              // 000000000114: 92000800
  v_add_u32     v0, vcc, s0, v0                         // 000000000118: 32000000
  s_load_dwordx2  s[0:1], s[6:7], 0x00                  // 00000000011C: C0060003 00000000
  s_load_dwordx4  s[8:11], s[6:7], 0x30                 // 000000000124: C00A0203 00000030
  s_waitcnt     lgkmcnt(0)                              // 00000000012C: BF8C007F
  v_add_u32     v0, vcc, v0, s0                         // 000000000130: D1196A00 00000100
  v_mov_b32     v1, s1                                  // 000000000138: 7E020201
  v_addc_u32    v1, vcc, 0, v1, vcc                     // 00000000013C: 38020280
  v_lshlrev_b64  v[0:1], 4, v[0:1]                      // 000000000140: D28F0000 00020084
  v_add_u32     v2, vcc, s8, v0                         // 000000000148: 32040008
  v_mov_b32     v3, s9                                  // 00000000014C: 7E060209
  v_addc_u32    v3, vcc, v3, v1, vcc                    // 000000000150: 38060303
  v_add_u32     v0, vcc, s10, v0                        // 000000000154: 3200000A
  v_mov_b32     v4, s11                                 // 000000000158: 7E08020B
  v_addc_u32    v1, vcc, v4, v1, vcc                    // 00000000015C: 38020304
  flat_load_dwordx4  v[4:7], v[2:3]                     // 000000000160: DC5C0000 04000002
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000168: BF8C0070
  v_mul_f32     v2, 0x41f00000, v6                      // 00000000016C: 0A040CFF 41F00000
  v_sub_f32     v3, 1.0, v5                             // 000000000174: 04060AF2
  v_sub_f32     v8, 1.0, v4                             // 000000000178: 041008F2
  v_mul_f32     v9, 0x41f00000, v5                      // 00000000017C: 0A120AFF 41F00000
  v_sub_f32     v10, 1.0, v6                            // 000000000184: 04140CF2
  v_madmk_f32   v6, v6, 0x42c80000, v10                 // 000000000188: 2E0C1506 42C80000
  v_madmk_f32   v2, v10, 0x40a00000, v2                 // 000000000190: 2E04050A 40A00000
  v_madmk_f32   v5, v5, 0x42c80000, v3                  // 000000000198: 2E0A0705 42C80000
  v_madmk_f32   v3, v3, 0x40a00000, v9                  // 0000000001A0: 2E061303 40A00000
  v_madmk_f32   v9, v4, 0x42c80000, v8                  // 0000000001A8: 2E121104 42C80000
  v_mul_f32     v4, 0x41f00000, v4                      // 0000000001B0: 0A0808FF 41F00000
  v_madmk_f32   v4, v8, 0x40a00000, v4                  // 0000000001B8: 2E080908 40A00000
  v_sub_f32     v8, 1.0, v7                             // 0000000001C0: 04100EF2
  v_add_f32     v9, v4, v9                              // 0000000001C4: 02121304
  v_add_f32     v10, v3, v5                             // 0000000001C8: 02140B03
  v_add_f32     v11, v2, v6                             // 0000000001CC: 02160D02
  v_madmk_f32   v5, v7, 0x42c80000, v8                  // 0000000001D0: 2E0A1107 42C80000
  v_mul_f32     v6, 0x41f00000, v7                      // 0000000001D8: 0A0C0EFF 41F00000
  v_madmk_f32   v6, v8, 0x40a00000, v6                  // 0000000001E0: 2E0C0D08 40A00000
  v_add_f32     v12, v6, v5                             // 0000000001E8: 02180B06
  flat_store_dwordx4  v[0:1], v[9:12]                   // 0000000001EC: DC7C0000 00000900
  s_endpgm                                              // 0000000001F4: BF810000
end

AMD HSA Code Object End
