AMD HSA Code Object
  Version 1.0
HSAIL 
  Version: 1.0
  Profile: FULL  Machine model: LARGE  Default float rounding: NEAR
ISA
  Vendor AMD  Arch AMDGPU  Version 8:0:1
Producer 'AMD HSA Runtime Finalizer' Version 1:0
Producer options
  '-hsa_call_convention=0 -dump-isa -O2'

Segments (total 1):
  Segment (0)
    Type: CODE_AGENT     Flags: 0x00000005
    Image Size: 592     Memory Size: 592     Align: 256     VAddr: 0

Data Sections (total 1):
  Section .hsatext (Index 4)
    Type: 1     Flags: 0x00c00007
    Size:  592     Address: 0     Align: 256

Relocation Sections (total 0):

Symbols (total 1):
  Symbol &__OpenCL_binomial_options_kernel (Index 1):
    Section: .hsatext     Section Offset: 0
    VAddr: 0     Size: 592     Alignment: 256
    Kind: KERNEL     Linkage: PROGRAM     Definition: TRUE

AMD Kernel Code for &__OpenCL_binomial_options_kernel: 
  amd_kernel_code_version_major                                = 1
  amd_kernel_code_version_minor                                = 1
  amd_machine_kind                                             = AMDGPU
  amd_machine_version_major                                    = 0
  amd_machine_version_minor                                    = 0
  amd_machine_version_stepping                                 = 0
  kernel_code_entry_byte_offset                                = 256
  max_scratch_backing_memory_byte_size                         = 0
  COMPUTE_PGM_RSRC1 (0xac004100):
    granulated_workitem_vgpr_count                             = 1
    granulated_wavefront_sgpr_count                            = 1
    priority                                                   = 0
    float_round_mode_32                                        = NEAREST_EVEN
    float_round_mode_16_64                                     = NEAREST_EVEN
    float_denorm_mode_32                                       = FLUSH_SOURCE_OUTPUT
    float_denorm_mode_16_64                                    = FLUSH_NONE
    enable_dx10_clamp                                          = TRUE
    enable_ieee_mode                                           = TRUE
  COMPUTE_PGM_RSRC2 (0x8c000000):
    user_sgpr_count                                            = 6
    enable_sgpr_workgroup_id_x                                 = TRUE
    enable_vgpr_workitem_id                                    = X
    granulated_lds_size                                        = 0
  KERNEL_CODE_PROPERTIES (0x4a000900):
    enable_sgpr_private_segment_buffer                         = TRUE
    enable_sgpr_kernarg_segment_ptr                            = TRUE
    private_element_size                                       = DWORD (4 bytes)
    is_ptr64                                                   = TRUE
    is_xnack_enabled                                           = TRUE
  kernarg_segment_byte_size                                    = 96
  wavefront_sgpr_count                                         = 12
  workitem_vgpr_count                                          = 5
  kernarg_segment_alignment                                    = 16 (4)
  group_segment_alignment                                      = 16 (4)
  private_segment_alignment                                    = 16 (4)
  wavefront_size                                               = 64 (6)

Disassembly:
  asic(VI)
  type(CS)
  
  //
  // amd_kernel_code_t for &__OpenCL_binomial_options_kernel (000000000000 - 000000000100)
  //
  //
  // &__OpenCL_binomial_options_kernel:
  //
  s_load_dwordx2  s[0:1], s[4:5], 0x38                  // 000000000100: C0060002 00000038
  s_load_dwordx2  s[2:3], s[4:5], 0x40                  // 000000000108: C0060082 00000040
  s_movk_i32    s7, 0x0000                              // 000000000110: B0070000
  s_lshl_b64    s[4:5], s[6:7], 4                       // 000000000114: 8E848406
  s_waitcnt     lgkmcnt(0)                              // 000000000118: BF8C007F
  s_add_u32     s0, s0, s4                              // 00000000011C: 80000400
  s_addc_u32    s1, s1, s5                              // 000000000120: 82010501
  s_load_dword  s6, s[0:1], 0x00                        // 000000000124: C0020180 00000000
  s_waitcnt     lgkmcnt(0)                              // 00000000012C: BF8C007F
  v_cmp_lt_f32  vcc, s6, 0                              // 000000000130: D041006A 00010006
  v_cndmask_b32  v0, 0.5, -0.5, vcc                     // 000000000138: D1000000 01A9E2F0
  v_mov_b32     v1, 0x3fb8aa3b                          // 000000000140: 7E0202FF 3FB8AA3B
  v_mac_f32     v0, s6, v1                              // 000000000148: 2C000206
  v_cvt_i32_f32  v0, v0                                 // 00000000014C: 7E001100
  v_readfirstlane_b32  s0, v0                           // 000000000150: 7E000500
  v_cvt_f32_i32  v0, s0                                 // 000000000154: 7E000A00
  v_mov_b32     v1, 0xbf317180                          // 000000000158: 7E0202FF BF317180
  v_mad_f32     v1, v0, v1, s6                          // 000000000160: D1C10001 001A0300
  v_madmk_f32   v2, v0, 0xb717f7d1, v1                  // 000000000168: 2E040300 B717F7D1
  v_mul_f32     v3, v2, v2                              // 000000000170: 0A060502
  v_mov_b32     v4, 0xb5ddea0e                          // 000000000174: 7E0802FF B5DDEA0E
  s_mov_b32     s1, 0x3331bb4c                          // 00000000017C: BE8100FF 3331BB4C
  v_mac_f32     v4, s1, v3                              // 000000000184: 2C080601
  v_madak_f32   v4, v3, v4, 0x388ab355                  // 000000000188: 30080903 388AB355
  v_madak_f32   v4, v3, v4, 0xbb360b61                  // 000000000190: 30080903 BB360B61
  s_lshl_b32    s0, s0, 23                              // 000000000198: 8E009700
  v_madak_f32   v4, v3, v4, 0x3e2aaaab                  // 00000000019C: 30080903 3E2AAAAB
  v_mad_f32     v3, v3, -v4, v2                         // 0000000001A4: D1C10003 440A0903
  v_mul_f32     v2, v2, v3                              // 0000000001AC: 0A040702
  v_sub_f32     v3, 2.0, v3                             // 0000000001B0: 040606F4
  s_mov_b32     s1, 0x6f800000                          // 0000000001B4: BE8100FF 6F800000
  v_cmp_gt_f32  vcc, abs(v3), s1                        // 0000000001BC: D044016A 00000303
  v_mov_b32     v4, 0x2f800000                          // 0000000001C4: 7E0802FF 2F800000
  v_cndmask_b32  v4, 1.0, v4, vcc                       // 0000000001CC: 000808F2
  v_mul_f32     v3, v3, v4                              // 0000000001D0: 0A060903
  v_rcp_f32     v3, v3                                  // 0000000001D4: 7E064503
  v_mul_f32     v2, v3, v2                              // 0000000001D8: 0A040503
  v_mul_f32     v2, v2, v4                              // 0000000001DC: 0A040902
  s_mov_b32     s1, 0x3717f7d1                          // 0000000001E0: BE8100FF 3717F7D1
  v_mad_f32     v2, v0, s1, -v2                         // 0000000001E8: D1C10002 84080300
  v_sub_f32     v0, v2, v1                              // 0000000001F0: 04000302
  v_sub_f32     v0, 1.0, v0                             // 0000000001F4: 040000F2
  v_add_u32     v0, vcc, s0, v0                         // 0000000001F8: 32000000
  v_mov_b32     v1, 0xc2aeac4f                          // 0000000001FC: 7E0202FF C2AEAC4F
  v_cmp_nlt_f32  vcc, s6, v1                            // 000000000204: 7C9C0206
  v_cndmask_b32  v0, 0, v0, vcc                         // 000000000208: 00000080
  v_mov_b32     v1, 0x42b17218                          // 00000000020C: 7E0202FF 42B17218
  v_cmp_lt_f32  vcc, s6, v1                             // 000000000214: 7C820206
  v_mov_b32     v1, 0x7f800000                          // 000000000218: 7E0202FF 7F800000
  v_cndmask_b32  v0, v1, v0, vcc                        // 000000000220: 00000101
  v_cmp_class_f32  vcc, s6, 3                           // 000000000224: D010006A 00010606
  v_mov_b32     v1, s6                                  // 00000000022C: 7E020206
  v_cndmask_b32  v0, v0, v1, vcc                        // 000000000230: 00000300
  s_add_u32     s0, s2, s4                              // 000000000234: 80000402
  s_addc_u32    s1, s3, s5                              // 000000000238: 82010503
  v_mov_b32     v1, s0                                  // 00000000023C: 7E020200
  v_mov_b32     v2, s1                                  // 000000000240: 7E040201
  flat_store_dword  v[1:2], v0                          // 000000000244: DC700000 00000001
  s_endpgm                                              // 00000000024C: BF810000
end

AMD HSA Code Object End
