module &_tmp_cloc_tmp_23832_BinomialOption_Kernels_opt_bc:1:0:$full:$large:$default;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_binomial_options_kernel(
	kernarg_u64 %__global_offset_0,
	kernarg_u64 %__global_offset_1,
	kernarg_u64 %__global_offset_2,
	kernarg_u64 %__printf_buffer,
	kernarg_u64 %__vqueue_pointer,
	kernarg_u64 %__aqlwrap_pointer,
	kernarg_u32 %numSteps,
	kernarg_u64 %randArray,
	kernarg_u64 %output,
	kernarg_u64 %callA,
	kernarg_u64 %callB)
{
	pragma "AMD RTI", "ARGSTART:__OpenCL_binomial_options_kernel";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1024";
	pragma "AMD RTI", "memory:private:0";
	pragma "AMD RTI", "memory:region:0";
	pragma "AMD RTI", "memory:local:0";
	pragma "AMD RTI", "value:__global_offset_0:u64:1:1:0";
	pragma "AMD RTI", "value:__global_offset_1:u64:1:1:16";
	pragma "AMD RTI", "value:__global_offset_2:u64:1:1:32";
	pragma "AMD RTI", "pointer:__printf_buffer:u8:1:1:48:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "value:__vqueue_pointer:u64:1:1:64";
	pragma "AMD RTI", "value:__aqlwrap_pointer:u64:1:1:80";
	pragma "AMD RTI", "value:numSteps:u32:1:1:96";
	pragma "AMD RTI", "pointer:randArray:float:1:1:112:uav:7:16:RW:0:0:0";
	pragma "AMD RTI", "constarg:7:randArray";
	pragma "AMD RTI", "pointer:output:float:1:1:128:uav:7:16:RW:0:0:0";
	pragma "AMD RTI", "pointer:callA:float:1:1:144:l:7:16:RW:0:0:0";
	pragma "AMD RTI", "pointer:callB:float:1:1:160:l:7:16:RW:0:0:0";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:8";
	pragma "AMD RTI", "enqueue_kernel:0";
	pragma "AMD RTI", "kernel_index:0";
	pragma "AMD RTI", "reflection:0:size_t";
	pragma "AMD RTI", "reflection:1:size_t";
	pragma "AMD RTI", "reflection:2:size_t";
	pragma "AMD RTI", "reflection:3:size_t";
	pragma "AMD RTI", "reflection:4:size_t";
	pragma "AMD RTI", "reflection:5:size_t";
	pragma "AMD RTI", "reflection:6:int";
	pragma "AMD RTI", "reflection:7:float4*";
	pragma "AMD RTI", "reflection:8:float4*";
	pragma "AMD RTI", "reflection:9:float4*";
	pragma "AMD RTI", "reflection:10:float4*";
	pragma "AMD RTI", "ARGEND:__OpenCL_binomial_options_kernel";

@__OpenCL_binomial_options_kernel_entry:
	// BB#0:
	workgroupid_u32	$s0, 0;
	cvt_u64_u32	$d0, $s0;
	shl_u64	$d0, $d0, 4;
	ld_kernarg_align(8)_width(all)_u64	$d1, [%randArray];
	add_u64	$d1, $d1, $d0;
	ld_v4_global_align(16)_const_width(WAVESIZE)_f32	($s14, $s5, $s4, $s2), [$d1];
	mul_ftz_f32	$s0, $s5, 0F41200000;
	sub_ftz_f32	$s10, 0F3f800000, $s5;
	mul_ftz_f32	$s3, $s10, 0F3e800000;
	ld_kernarg_align(4)_width(all)_u32	$s1, [%numSteps];
	add_ftz_f32	$s0, $s3, $s0;
	cvt_near_f32_s32	$s7, $s1;
	amd_gcn_divrelaxednarrow_f32	$s6, 0F3f800000, $s7;
	mul_ftz_f32	$s8, $s0, $s6;
	nsqrt_f32	$s0, $s8;
	mul_ftz_f32	$s3, $s0, 0F3e99999a;
	mul_ftz_f32	$s0, $s2, 0F41200000;
	sub_ftz_f32	$s12, 0F3f800000, $s2;
	mul_ftz_f32	$s9, $s12, 0F3e800000;
	add_ftz_f32	$s0, $s9, $s0;
	mul_ftz_f32	$s9, $s0, $s6;
	mul_ftz_f32	$s13, $s4, 0F41200000;
	sub_ftz_f32	$s11, 0F3f800000, $s4;
	mul_ftz_f32	$s15, $s11, 0F3e800000;
	workitemid_u32	$s0, 0;
	cvt_near_f32_u32	$s16, $s0;
	add_ftz_f32	$s16, $s16, $s16;
	add_ftz_f32	$s13, $s15, $s13;
	sub_ftz_f32	$s17, $s16, $s7;
	mul_ftz_f32	$s7, $s13, $s6;
	mul_ftz_f32	$s13, $s3, $s17;
	cmp_lt_ftz_b1_f32	$c0, $s13, 0F00000000;
	cmov_b32	$s15, $c0, 0xbf000000, 0x3f000000;
	nfma_f32	$s15, $s13, 0F3fb8aa3b, $s15;
	cvt_ftz_s32_f32	$s15, $s15;
	cvt_near_f32_s32	$s18, $s15;
	nfma_f32	$s16, $s18, 0Fbf317180, $s13;
	mul_ftz_f32	$s19, $s18, 0Fb717f7d1;
	add_ftz_f32	$s19, $s16, $s19;
	mul_ftz_f32	$s20, $s19, $s19;
	nfma_f32	$s21, $s20, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s21, $s20, $s21, 0F388ab355;
	nfma_f32	$s21, $s20, $s21, 0Fbb360b61;
	nfma_f32	$s21, $s20, $s21, 0F3e2aaaab;
	neg_f32	$s21, $s21;
	nfma_f32	$s20, $s20, $s21, $s19;
	mul_ftz_f32	$s19, $s19, $s20;
	sub_ftz_f32	$s20, 0F40000000, $s20;
	amd_gcn_divrelaxed_ftz_f32	$s19, $s19, $s20;
	mul_ftz_f32	$s18, $s18, 0F3717f7d1;
	sub_ftz_f32	$s18, $s18, $s19;
	sub_ftz_f32	$s16, $s18, $s16;
	shl_u32	$s15, $s15, 23;
	sub_ftz_f32	$s16, 0F3f800000, $s16;
	add_u32	$s15, $s16, $s15;
	cmp_lt_ftz_b1_f32	$c0, $s13, 0Fc2aeac4f;
	cmov_b32	$s15, $c0, 0, $s15;
	cmp_lt_ftz_b1_f32	$c0, $s13, 0F42b17218;
	cmov_b32	$s15, $c0, $s15, 0x7f800000;
	cmp_nan_ftz_b1_f32	$c0, $s13, $s13;
	cmov_b32	$s13, $c0, $s13, $s15;
	mul_ftz_f32	$s16, $s14, 0F41200000;
	sub_ftz_f32	$s15, 0F3f800000, $s14;
	mul_ftz_f32	$s18, $s15, 0F3e800000;
	add_ftz_f32	$s16, $s18, $s16;
	mul_ftz_f32	$s6, $s16, $s6;
	mul_ftz_f32	$s18, $s2, 0F42c80000;
	mul_ftz_f32	$s20, $s14, 0F41f00000;
	mul_ftz_f32	$s21, $s14, 0F42c80000;
	mul_ftz_f32	$s22, $s5, 0F41f00000;
	mul_ftz_f32	$s23, $s5, 0F42c80000;
	mul_ftz_f32	$s14, $s4, 0F41f00000;
	mul_ftz_f32	$s16, $s4, 0F42c80000;
	mul_ftz_f32	$s19, $s2, 0F41f00000;
	nsqrt_f32	$s2, $s6;
	mul_ftz_f32	$s2, $s2, 0F3e99999a;
	mul_ftz_f32	$s4, $s2, $s17;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0F00000000;
	cmov_b32	$s5, $c0, 0xbf000000, 0x3f000000;
	nfma_f32	$s5, $s4, 0F3fb8aa3b, $s5;
	cvt_ftz_s32_f32	$s5, $s5;
	cvt_near_f32_s32	$s25, $s5;
	nfma_f32	$s24, $s25, 0Fbf317180, $s4;
	mul_ftz_f32	$s26, $s25, 0Fb717f7d1;
	add_ftz_f32	$s26, $s24, $s26;
	mul_ftz_f32	$s27, $s26, $s26;
	nfma_f32	$s28, $s27, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s28, $s27, $s28, 0F388ab355;
	nfma_f32	$s28, $s27, $s28, 0Fbb360b61;
	nfma_f32	$s28, $s27, $s28, 0F3e2aaaab;
	neg_f32	$s28, $s28;
	nfma_f32	$s27, $s27, $s28, $s26;
	mul_ftz_f32	$s26, $s26, $s27;
	sub_ftz_f32	$s27, 0F40000000, $s27;
	amd_gcn_divrelaxed_ftz_f32	$s26, $s26, $s27;
	mul_ftz_f32	$s25, $s25, 0F3717f7d1;
	sub_ftz_f32	$s25, $s25, $s26;
	sub_ftz_f32	$s24, $s25, $s24;
	shl_u32	$s5, $s5, 23;
	sub_ftz_f32	$s24, 0F3f800000, $s24;
	add_u32	$s5, $s24, $s5;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0Fc2aeac4f;
	cmov_b32	$s5, $c0, 0, $s5;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0F42b17218;
	cmov_b32	$s5, $c0, $s5, 0x7f800000;
	cmp_nan_ftz_b1_f32	$c0, $s4, $s4;
	cmov_b32	$s24, $c0, $s4, $s5;
	nsqrt_f32	$s4, $s9;
	mul_ftz_f32	$s4, $s4, 0F3e99999a;
	mul_ftz_f32	$s5, $s4, $s17;
	cmp_lt_ftz_b1_f32	$c0, $s5, 0F00000000;
	cmov_b32	$s25, $c0, 0xbf000000, 0x3f000000;
	nfma_f32	$s25, $s5, 0F3fb8aa3b, $s25;
	cvt_ftz_s32_f32	$s25, $s25;
	cvt_near_f32_s32	$s27, $s25;
	nfma_f32	$s26, $s27, 0Fbf317180, $s5;
	mul_ftz_f32	$s28, $s27, 0Fb717f7d1;
	add_ftz_f32	$s28, $s26, $s28;
	mul_ftz_f32	$s29, $s28, $s28;
	nfma_f32	$s30, $s29, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s30, $s29, $s30, 0F388ab355;
	nfma_f32	$s30, $s29, $s30, 0Fbb360b61;
	nfma_f32	$s30, $s29, $s30, 0F3e2aaaab;
	neg_f32	$s30, $s30;
	nfma_f32	$s29, $s29, $s30, $s28;
	mul_ftz_f32	$s28, $s28, $s29;
	sub_ftz_f32	$s29, 0F40000000, $s29;
	amd_gcn_divrelaxed_ftz_f32	$s28, $s28, $s29;
	mul_ftz_f32	$s27, $s27, 0F3717f7d1;
	sub_ftz_f32	$s27, $s27, $s28;
	sub_ftz_f32	$s26, $s27, $s26;
	shl_u32	$s25, $s25, 23;
	sub_ftz_f32	$s26, 0F3f800000, $s26;
	add_u32	$s25, $s26, $s25;
	cmp_lt_ftz_b1_f32	$c0, $s5, 0Fc2aeac4f;
	cmov_b32	$s25, $c0, 0, $s25;
	cmp_lt_ftz_b1_f32	$c0, $s5, 0F42b17218;
	cmov_b32	$s25, $c0, $s25, 0x7f800000;
	cmp_nan_ftz_b1_f32	$c0, $s5, $s5;
	cmov_b32	$s25, $c0, $s5, $s25;
	nsqrt_f32	$s5, $s7;
	mul_ftz_f32	$s5, $s5, 0F3e99999a;
	mul_ftz_f32	$s17, $s5, $s17;
	cmp_lt_ftz_b1_f32	$c0, $s17, 0F00000000;
	cmov_b32	$s26, $c0, 0xbf000000, 0x3f000000;
	nfma_f32	$s26, $s17, 0F3fb8aa3b, $s26;
	cvt_ftz_s32_f32	$s26, $s26;
	cvt_near_f32_s32	$s28, $s26;
	nfma_f32	$s27, $s28, 0Fbf317180, $s17;
	mul_ftz_f32	$s29, $s28, 0Fb717f7d1;
	add_ftz_f32	$s29, $s27, $s29;
	mul_ftz_f32	$s30, $s29, $s29;
	nfma_f32	$s31, $s30, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s31, $s30, $s31, 0F388ab355;
	nfma_f32	$s31, $s30, $s31, 0Fbb360b61;
	nfma_f32	$s31, $s30, $s31, 0F3e2aaaab;
	neg_f32	$s31, $s31;
	nfma_f32	$s30, $s30, $s31, $s29;
	mul_ftz_f32	$s29, $s29, $s30;
	sub_ftz_f32	$s30, 0F40000000, $s30;
	amd_gcn_divrelaxed_ftz_f32	$s29, $s29, $s30;
	mul_ftz_f32	$s28, $s28, 0F3717f7d1;
	sub_ftz_f32	$s28, $s28, $s29;
	sub_ftz_f32	$s27, $s28, $s27;
	shl_u32	$s26, $s26, 23;
	sub_ftz_f32	$s27, 0F3f800000, $s27;
	add_u32	$s26, $s27, $s26;
	cmp_lt_ftz_b1_f32	$c0, $s17, 0Fc2aeac4f;
	cmov_b32	$s26, $c0, 0, $s26;
	cmp_lt_ftz_b1_f32	$c0, $s17, 0F42b17218;
	cmov_b32	$s26, $c0, $s26, 0x7f800000;
	cmp_nan_ftz_b1_f32	$c0, $s17, $s17;
	cmov_b32	$s17, $c0, $s17, $s26;
	add_ftz_f32	$s23, $s10, $s23;
	mul_ftz_f32	$s10, $s10, 0F40a00000;
	add_ftz_f32	$s22, $s10, $s22;
	add_ftz_f32	$s21, $s15, $s21;
	mul_ftz_f32	$s10, $s15, 0F40a00000;
	add_ftz_f32	$s15, $s10, $s20;
	add_ftz_f32	$s10, $s12, $s18;
	mul_ftz_f32	$s12, $s12, 0F40a00000;
	cvt_u64_u32	$d1, $s0;
	shl_u64	$d4, $d1, 4;
	ld_kernarg_align(8)_width(all)_u64	$d3, [%callB];
	ld_kernarg_align(8)_width(all)_u64	$d1, [%callA];
	add_ftz_f32	$s12, $s12, $s19;
	mul_ftz_f32	$s18, $s11, 0F40a00000;
	add_ftz_f32	$s16, $s11, $s16;
	add_ftz_f32	$s14, $s18, $s14;
	add_u64	$d2, $d1, $d4;
	cvt_u32_u64	$s11, $d2;
	mul_ftz_f32	$s15, $s15, $s24;
	mul_ftz_f32	$s13, $s22, $s13;
	sub_ftz_f32	$s18, $s13, $s23;
	sub_ftz_f32	$s13, $s15, $s21;
	amd_gcn_max_f32	$s13, $s13, 0F00000000;
	amd_gcn_max_f32	$s15, $s18, 0F00000000;
	mul_ftz_f32	$s14, $s14, $s17;
	sub_ftz_f32	$s14, $s14, $s16;
	amd_gcn_max_f32	$s14, $s14, 0F00000000;
	mul_ftz_f32	$s12, $s12, $s25;
	sub_ftz_f32	$s10, $s12, $s10;
	amd_gcn_max_f32	$s10, $s10, 0F00000000;
	st_v4_group_align(16)_f32	($s13, $s15, $s14, $s10), [$s11];
	barrier;
	cmp_lt_b1_s32	$c0, $s1, 1;
	cbr_b1	$c0, @BB0_7;
	// BB#1:                                // %.lr.ph
	cmp_lt_ftz_b1_f32	$c0, $s3, 0F00000000;
	cmov_b32	$s10, $c0, 0xbf000000, 0x3f000000;
	mul_ftz_f32	$s9, $s9, 0F3ca3d70a;
	cmp_lt_ftz_b1_f32	$c0, $s9, 0F00000000;
	cmov_b32	$s11, $c0, 0xbf000000, 0x3f000000;
	nfma_f32	$s10, $s3, 0F3fb8aa3b, $s10;
	cvt_ftz_s32_f32	$s10, $s10;
	cvt_near_f32_s32	$s14, $s10;
	nfma_f32	$s12, $s14, 0Fbf317180, $s3;
	mul_ftz_f32	$s13, $s14, 0Fb717f7d1;
	add_ftz_f32	$s13, $s12, $s13;
	mul_ftz_f32	$s15, $s13, $s13;
	nfma_f32	$s11, $s9, 0F3fb8aa3b, $s11;
	nfma_f32	$s16, $s15, 0F3331bb4c, 0Fb5ddea0e;
	cvt_ftz_s32_f32	$s11, $s11;
	nfma_f32	$s16, $s15, $s16, 0F388ab355;
	nfma_f32	$s16, $s15, $s16, 0Fbb360b61;
	nfma_f32	$s16, $s15, $s16, 0F3e2aaaab;
	neg_f32	$s17, $s16;
	cvt_near_f32_s32	$s16, $s11;
	nfma_f32	$s18, $s15, $s17, $s13;
	nfma_f32	$s15, $s16, 0Fbf317180, $s9;
	mul_ftz_f32	$s17, $s16, 0Fb717f7d1;
	add_ftz_f32	$s17, $s15, $s17;
	mul_ftz_f32	$s19, $s17, $s17;
	nfma_f32	$s20, $s19, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s20, $s19, $s20, 0F388ab355;
	nfma_f32	$s20, $s19, $s20, 0Fbb360b61;
	nfma_f32	$s20, $s19, $s20, 0F3e2aaaab;
	neg_f32	$s20, $s20;
	nfma_f32	$s19, $s19, $s20, $s17;
	mul_ftz_f32	$s17, $s17, $s19;
	sub_ftz_f32	$s19, 0F40000000, $s19;
	amd_gcn_divrelaxed_ftz_f32	$s17, $s17, $s19;
	mul_ftz_f32	$s13, $s13, $s18;
	sub_ftz_f32	$s18, 0F40000000, $s18;
	amd_gcn_divrelaxed_ftz_f32	$s19, $s13, $s18;
	mul_ftz_f32	$s8, $s8, 0F3ca3d70a;
	cmp_lt_ftz_b1_f32	$c0, $s8, 0F00000000;
	cmov_b32	$s13, $c0, 0xbf000000, 0x3f000000;
	nfma_f32	$s13, $s8, 0F3fb8aa3b, $s13;
	cvt_ftz_s32_f32	$s13, $s13;
	cvt_near_f32_s32	$s20, $s13;
	nfma_f32	$s18, $s20, 0Fbf317180, $s8;
	mul_ftz_f32	$s21, $s20, 0Fb717f7d1;
	add_ftz_f32	$s21, $s18, $s21;
	mul_ftz_f32	$s22, $s21, $s21;
	nfma_f32	$s23, $s22, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s23, $s22, $s23, 0F388ab355;
	nfma_f32	$s23, $s22, $s23, 0Fbb360b61;
	nfma_f32	$s23, $s22, $s23, 0F3e2aaaab;
	neg_f32	$s23, $s23;
	nfma_f32	$s22, $s22, $s23, $s21;
	mul_ftz_f32	$s14, $s14, 0F3717f7d1;
	sub_ftz_f32	$s19, $s14, $s19;
	mul_ftz_f32	$s14, $s16, 0F3717f7d1;
	sub_ftz_f32	$s16, $s14, $s17;
	mul_ftz_f32	$s14, $s21, $s22;
	sub_ftz_f32	$s17, 0F40000000, $s22;
	amd_gcn_divrelaxed_ftz_f32	$s14, $s14, $s17;
	mul_ftz_f32	$s17, $s20, 0F3717f7d1;
	sub_ftz_f32	$s14, $s17, $s14;
	sub_ftz_f32	$s14, $s14, $s18;
	sub_ftz_f32	$s16, $s16, $s15;
	mul_ftz_f32	$s7, $s7, 0F3ca3d70a;
	sub_ftz_f32	$s18, $s19, $s12;
	cmp_lt_ftz_b1_f32	$c0, $s7, 0F00000000;
	cmov_b32	$s12, $c0, 0xbf000000, 0x3f000000;
	nfma_f32	$s12, $s7, 0F3fb8aa3b, $s12;
	cvt_ftz_s32_f32	$s12, $s12;
	cvt_near_f32_s32	$s17, $s12;
	nfma_f32	$s15, $s17, 0Fbf317180, $s7;
	mul_ftz_f32	$s19, $s17, 0Fb717f7d1;
	add_ftz_f32	$s19, $s15, $s19;
	mul_ftz_f32	$s20, $s19, $s19;
	nfma_f32	$s21, $s20, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s21, $s20, $s21, 0F388ab355;
	nfma_f32	$s21, $s20, $s21, 0Fbb360b61;
	nfma_f32	$s21, $s20, $s21, 0F3e2aaaab;
	neg_f32	$s21, $s21;
	nfma_f32	$s20, $s20, $s21, $s19;
	mul_ftz_f32	$s19, $s19, $s20;
	sub_ftz_f32	$s20, 0F40000000, $s20;
	amd_gcn_divrelaxed_ftz_f32	$s19, $s19, $s20;
	shl_u32	$s10, $s10, 23;
	sub_ftz_f32	$s18, 0F3f800000, $s18;
	add_u32	$s10, $s18, $s10;
	shl_u32	$s11, $s11, 23;
	sub_ftz_f32	$s16, 0F3f800000, $s16;
	add_u32	$s16, $s16, $s11;
	shl_u32	$s11, $s13, 23;
	sub_ftz_f32	$s13, 0F3f800000, $s14;
	add_u32	$s13, $s13, $s11;
	mul_ftz_f32	$s11, $s17, 0F3717f7d1;
	sub_ftz_f32	$s11, $s11, $s19;
	sub_ftz_f32	$s11, $s11, $s15;
	cmp_lt_ftz_b1_f32	$c0, $s8, 0Fc2aeac4f;
	cmov_b32	$s14, $c0, 0, $s13;
	mov_b32	$s13, $s16;
	cmp_lt_ftz_b1_f32	$c0, $s9, 0Fc2aeac4f;
	cmov_b32	$s13, $c0, 0, $s13;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0Fc2aeac4f;
	cmov_b32	$s10, $c0, 0, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0F42b17218;
	cmov_b32	$s10, $c0, $s10, 0x7f800000;
	cmp_lt_ftz_b1_f32	$c0, $s9, 0F42b17218;
	cmov_b32	$s13, $c0, $s13, 0x7f800000;
	cmp_lt_ftz_b1_f32	$c0, $s8, 0F42b17218;
	cmov_b32	$s14, $c0, $s14, 0x7f800000;
	shl_u32	$s12, $s12, 23;
	sub_ftz_f32	$s11, 0F3f800000, $s11;
	add_u32	$s11, $s11, $s12;
	cmp_lt_ftz_b1_f32	$c0, $s7, 0Fc2aeac4f;
	cmov_b32	$s11, $c0, 0, $s11;
	cmp_lt_ftz_b1_f32	$c0, $s7, 0F42b17218;
	cmov_b32	$s11, $c0, $s11, 0x7f800000;
	cmp_nan_ftz_b1_f32	$c0, $s7, $s7;
	cmov_b32	$s7, $c0, $s7, $s11;
	cmp_nan_ftz_b1_f32	$c0, $s8, $s8;
	cmov_b32	$s8, $c0, $s8, $s14;
	cmp_nan_ftz_b1_f32	$c0, $s9, $s9;
	cmov_b32	$s9, $c0, $s9, $s13;
	cmp_nan_ftz_b1_f32	$c0, $s3, $s3;
	cmov_b32	$s3, $c0, $s3, $s10;
	mul_ftz_f32	$s6, $s6, 0F3ca3d70a;
	cmp_lt_ftz_b1_f32	$c0, $s6, 0F00000000;
	cmov_b32	$s10, $c0, 0xbf000000, 0x3f000000;
	nfma_f32	$s10, $s6, 0F3fb8aa3b, $s10;
	cvt_ftz_s32_f32	$s10, $s10;
	cvt_near_f32_s32	$s12, $s10;
	nfma_f32	$s11, $s12, 0Fbf317180, $s6;
	mul_ftz_f32	$s13, $s12, 0Fb717f7d1;
	add_ftz_f32	$s13, $s11, $s13;
	mul_ftz_f32	$s14, $s13, $s13;
	nfma_f32	$s15, $s14, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s15, $s14, $s15, 0F388ab355;
	nfma_f32	$s15, $s14, $s15, 0Fbb360b61;
	nfma_f32	$s15, $s14, $s15, 0F3e2aaaab;
	neg_f32	$s15, $s15;
	nfma_f32	$s14, $s14, $s15, $s13;
	mul_ftz_f32	$s13, $s13, $s14;
	sub_ftz_f32	$s14, 0F40000000, $s14;
	amd_gcn_divrelaxed_ftz_f32	$s13, $s13, $s14;
	mul_ftz_f32	$s12, $s12, 0F3717f7d1;
	sub_ftz_f32	$s12, $s12, $s13;
	sub_ftz_f32	$s11, $s12, $s11;
	shl_u32	$s10, $s10, 23;
	sub_ftz_f32	$s11, 0F3f800000, $s11;
	add_u32	$s10, $s11, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s6, 0Fc2aeac4f;
	cmov_b32	$s10, $c0, 0, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s6, 0F42b17218;
	cmov_b32	$s10, $c0, $s10, 0x7f800000;
	cmp_nan_ftz_b1_f32	$c0, $s6, $s6;
	cmov_b32	$s6, $c0, $s6, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s2, 0F00000000;
	cmov_b32	$s10, $c0, 0xbf000000, 0x3f000000;
	nfma_f32	$s10, $s2, 0F3fb8aa3b, $s10;
	cvt_ftz_s32_f32	$s10, $s10;
	cvt_near_f32_s32	$s12, $s10;
	nfma_f32	$s11, $s12, 0Fbf317180, $s2;
	mul_ftz_f32	$s13, $s12, 0Fb717f7d1;
	add_ftz_f32	$s13, $s11, $s13;
	mul_ftz_f32	$s14, $s13, $s13;
	nfma_f32	$s15, $s14, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s15, $s14, $s15, 0F388ab355;
	nfma_f32	$s15, $s14, $s15, 0Fbb360b61;
	nfma_f32	$s15, $s14, $s15, 0F3e2aaaab;
	neg_f32	$s15, $s15;
	nfma_f32	$s14, $s14, $s15, $s13;
	mul_ftz_f32	$s13, $s13, $s14;
	sub_ftz_f32	$s14, 0F40000000, $s14;
	amd_gcn_divrelaxed_ftz_f32	$s13, $s13, $s14;
	mul_ftz_f32	$s12, $s12, 0F3717f7d1;
	sub_ftz_f32	$s12, $s12, $s13;
	sub_ftz_f32	$s11, $s12, $s11;
	shl_u32	$s10, $s10, 23;
	sub_ftz_f32	$s11, 0F3f800000, $s11;
	add_u32	$s10, $s11, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s2, 0Fc2aeac4f;
	cmov_b32	$s10, $c0, 0, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s2, 0F42b17218;
	cmov_b32	$s10, $c0, $s10, 0x7f800000;
	cmp_nan_ftz_b1_f32	$c0, $s2, $s2;
	cmov_b32	$s2, $c0, $s2, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0F00000000;
	cmov_b32	$s10, $c0, 0xbf000000, 0x3f000000;
	nfma_f32	$s10, $s4, 0F3fb8aa3b, $s10;
	cvt_ftz_s32_f32	$s10, $s10;
	cvt_near_f32_s32	$s12, $s10;
	nfma_f32	$s11, $s12, 0Fbf317180, $s4;
	mul_ftz_f32	$s13, $s12, 0Fb717f7d1;
	add_ftz_f32	$s13, $s11, $s13;
	mul_ftz_f32	$s14, $s13, $s13;
	nfma_f32	$s15, $s14, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s15, $s14, $s15, 0F388ab355;
	nfma_f32	$s15, $s14, $s15, 0Fbb360b61;
	nfma_f32	$s15, $s14, $s15, 0F3e2aaaab;
	neg_f32	$s15, $s15;
	nfma_f32	$s14, $s14, $s15, $s13;
	mul_ftz_f32	$s13, $s13, $s14;
	sub_ftz_f32	$s14, 0F40000000, $s14;
	amd_gcn_divrelaxed_ftz_f32	$s13, $s13, $s14;
	mul_ftz_f32	$s12, $s12, 0F3717f7d1;
	sub_ftz_f32	$s12, $s12, $s13;
	sub_ftz_f32	$s11, $s12, $s11;
	shl_u32	$s10, $s10, 23;
	sub_ftz_f32	$s11, 0F3f800000, $s11;
	add_u32	$s10, $s11, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0Fc2aeac4f;
	cmov_b32	$s10, $c0, 0, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0F42b17218;
	cmov_b32	$s10, $c0, $s10, 0x7f800000;
	cmp_nan_ftz_b1_f32	$c0, $s4, $s4;
	cmov_b32	$s4, $c0, $s4, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s5, 0F00000000;
	cmov_b32	$s10, $c0, 0xbf000000, 0x3f000000;
	nfma_f32	$s10, $s5, 0F3fb8aa3b, $s10;
	cvt_ftz_s32_f32	$s10, $s10;
	cvt_near_f32_s32	$s12, $s10;
	nfma_f32	$s11, $s12, 0Fbf317180, $s5;
	mul_ftz_f32	$s13, $s12, 0Fb717f7d1;
	add_ftz_f32	$s13, $s11, $s13;
	mul_ftz_f32	$s14, $s13, $s13;
	nfma_f32	$s15, $s14, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s15, $s14, $s15, 0F388ab355;
	nfma_f32	$s15, $s14, $s15, 0Fbb360b61;
	nfma_f32	$s15, $s14, $s15, 0F3e2aaaab;
	neg_f32	$s15, $s15;
	nfma_f32	$s14, $s14, $s15, $s13;
	mul_ftz_f32	$s13, $s13, $s14;
	sub_ftz_f32	$s14, 0F40000000, $s14;
	amd_gcn_divrelaxed_ftz_f32	$s13, $s13, $s14;
	mul_ftz_f32	$s12, $s12, 0F3717f7d1;
	sub_ftz_f32	$s12, $s12, $s13;
	sub_ftz_f32	$s11, $s12, $s11;
	shl_u32	$s10, $s10, 23;
	sub_ftz_f32	$s11, 0F3f800000, $s11;
	add_u32	$s10, $s11, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s5, 0Fc2aeac4f;
	cmov_b32	$s10, $c0, 0, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s5, 0F42b17218;
	cmov_b32	$s10, $c0, $s10, 0x7f800000;
	cmp_nan_ftz_b1_f32	$c0, $s5, $s5;
	cmov_b32	$s11, $c0, $s5, $s10;
	amd_gcn_divrelaxednarrow_f32	$s12, 0F3f800000, $s3;
	amd_gcn_divrelaxednarrow_f32	$s10, 0F3f800000, $s4;
	sub_ftz_f32	$s5, $s4, $s10;
	sub_ftz_f32	$s10, $s9, $s10;
	sub_ftz_f32	$s4, $s3, $s12;
	sub_ftz_f32	$s12, $s8, $s12;
	amd_gcn_divrelaxednarrow_f32	$s13, 0F3f800000, $s11;
	sub_ftz_f32	$s3, $s11, $s13;
	sub_ftz_f32	$s13, $s7, $s13;
	amd_gcn_divrelaxednarrow_f32	$s11, 0F3f800000, $s2;
	amd_gcn_divrelaxed_ftz_f32	$s3, $s13, $s3;
	amd_gcn_divrelaxed_ftz_f32	$s4, $s12, $s4;
	amd_gcn_divrelaxed_ftz_f32	$s10, $s10, $s5;
	sub_ftz_f32	$s5, $s2, $s11;
	sub_ftz_f32	$s13, $s6, $s11;
	amd_gcn_divrelaxednarrow_f32	$s9, 0F3f800000, $s9;
	mul_ftz_f32	$s2, $s9, $s10;
	sub_ftz_f32	$s11, 0F3f800000, $s4;
	sub_ftz_f32	$s12, 0F3f800000, $s3;
	amd_gcn_divrelaxed_ftz_f32	$s14, $s13, $s5;
	amd_gcn_divrelaxednarrow_f32	$s13, 0F3f800000, $s6;
	amd_gcn_divrelaxednarrow_f32	$s8, 0F3f800000, $s8;
	amd_gcn_divrelaxednarrow_f32	$s7, 0F3f800000, $s7;
	mul_ftz_f32	$s3, $s7, $s3;
	mul_ftz_f32	$s4, $s8, $s4;
	mul_ftz_f32	$s5, $s13, $s14;
	sub_ftz_f32	$s14, 0F3f800000, $s14;
	sub_ftz_f32	$s6, 0F3f800000, $s10;
	mul_ftz_f32	$s6, $s9, $s6;
	mul_ftz_f32	$s7, $s7, $s12;
	mul_ftz_f32	$s8, $s8, $s11;
	mul_ftz_f32	$s9, $s13, $s14;
	add_u32	$s10, $s0, 1;
	cvt_u64_u32	$d5, $s10;
	shl_u64	$d6, $d5, 4;
	add_u64	$d5, $d1, $d6;
	add_u64	$d4, $d3, $d4;
	add_u64	$d3, $d3, $d6;

@BB0_2:
	cmp_ge_b1_u32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_4;
	// BB#3:
	cvt_u32_u64	$s12, $d5;
	cvt_u32_u64	$s11, $d2;
	ld_v4_group_align(16)_f32	($s13, $s15, $s14, $s10), [$s11];
	ld_v4_group_align(16)_f32	($s16, $s17, $s18, $s11), [$s12];
	mul_ftz_f32	$s12, $s7, $s18;
	mul_ftz_f32	$s14, $s3, $s14;
	mul_ftz_f32	$s17, $s8, $s17;
	mul_ftz_f32	$s15, $s4, $s15;
	mul_ftz_f32	$s16, $s9, $s16;
	mul_ftz_f32	$s13, $s5, $s13;
	add_ftz_f32	$s13, $s13, $s16;
	add_ftz_f32	$s15, $s15, $s17;
	add_ftz_f32	$s12, $s14, $s12;
	mul_ftz_f32	$s11, $s6, $s11;
	mul_ftz_f32	$s10, $s2, $s10;
	add_ftz_f32	$s10, $s10, $s11;
	cvt_u32_u64	$s11, $d4;
	st_v4_group_align(16)_f32	($s13, $s15, $s12, $s10), [$s11];

@BB0_4:
	barrier;
	add_u32	$s1, $s1, -1;
	cmp_ge_b1_u32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_6;
	// BB#5:
	cvt_u32_u64	$s12, $d3;
	cvt_u32_u64	$s11, $d4;
	ld_v4_group_align(16)_f32	($s13, $s15, $s14, $s10), [$s11];
	ld_v4_group_align(16)_f32	($s16, $s17, $s18, $s11), [$s12];
	mul_ftz_f32	$s12, $s7, $s18;
	mul_ftz_f32	$s14, $s3, $s14;
	mul_ftz_f32	$s17, $s8, $s17;
	mul_ftz_f32	$s15, $s4, $s15;
	mul_ftz_f32	$s16, $s9, $s16;
	mul_ftz_f32	$s13, $s5, $s13;
	add_ftz_f32	$s13, $s13, $s16;
	add_ftz_f32	$s15, $s15, $s17;
	add_ftz_f32	$s12, $s14, $s12;
	mul_ftz_f32	$s11, $s6, $s11;
	mul_ftz_f32	$s10, $s2, $s10;
	add_ftz_f32	$s10, $s10, $s11;
	cvt_u32_u64	$s11, $d2;
	st_v4_group_align(16)_f32	($s13, $s15, $s12, $s10), [$s11];

@BB0_6:
	barrier;
	add_u32	$s1, $s1, -1;
	cmp_gt_b1_s32	$c0, $s1, 0;
	cbr_b1	$c0, @BB0_2;

@BB0_7:
	// %._crit_edge
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_9;
	// BB#8:
	cvt_u32_u64	$s0, $d1;
	ld_kernarg_align(8)_width(all)_u64	$d1, [%output];
	add_u64	$d0, $d1, $d0;
	ld_v4_group_align(16)_width(WAVESIZE)_f32	($s1, $s2, $s3, $s4), [$s0];
	st_v4_global_align(16)_f32	($s1, $s2, $s3, $s4), [$d0];

@BB0_9:
	ret;
};
